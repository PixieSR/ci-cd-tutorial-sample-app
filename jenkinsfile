pipeline {
    agent any
    environment {
        DATABASE_URL = "postgresql://admin:a1a1a1@postgres:5432/DB"
        TEST_DATABASE_URL = "postgresql://admin:a1a1a1@postgres:5432/test_db"
        DOCKER_HUB_CREDENTIALS = credentials('sharon-docker')
        DOCKER_IMAGE = 'sharonpixie/ci-cd-tutorial-sample-app'
        APP_URL = 'http://localhost:8080'  // Update to your actual app URL
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout the repository
                git 'https://github.com/PixieSR/ci-cd-tutorial-sample-app.git'
            }
        }
        stage('Build and Run Docker Image') {
            steps {
                // Build the Docker image and start the application using Docker Compose
                sh '''
                    docker build -t ${DOCKER_IMAGE}:latest .
                    docker-compose up -d
                '''
            }
        }
        stage('Check if App is Running') {
            steps {
                // Check if the application is responding with HTTP 200 OK
                script {
                    def response = sh(script: "curl -o /dev/null -s -w \"%{http_code}\" ${APP_URL}", returnStdout: true).trim()
                    if (response != '200') {
                        error "Application is not responding with HTTP 200 OK. Status code: ${response}"
                    } else {
                        echo "Application is up and running with HTTP 200 OK."
                    }
                }
            }
        }
        stage('Push to Docker Hub') {
            steps {
                // Login to Docker Hub and push the Docker image
                sh '''
                    echo $DOCKER_HUB_CREDENTIALS_PSW | docker login -u $DOCKER_HUB_CREDENTIALS_USR --password-stdin
                    docker push ${DOCKER_IMAGE}:latest
                '''
            }
        }
    }
    post {
        always {
            // Clean up Docker Compose setup and logout from Docker
            sh 'docker-compose down'
            sh 'docker logout'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
