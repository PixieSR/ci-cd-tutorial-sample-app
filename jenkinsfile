pipeline {
    agent any
    environment {
        DATABASE_URL = "postgresql://admin:a1a1a1@postgres:5432/DB"
        TEST_DATABASE_URL = "postgresql://admin:a1a1a1@postgres:5432/test_db"
        DOCKER_HUB_CREDENTIALS = credentials('sharon-docker')
        DOCKER_IMAGE = 'sharonpixie/ci-cd-tutorial-sample-app'
    }
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/PixieSR/ci-cd-tutorial-sample-app.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                sh '''
                    docker build -t ${DOCKER_IMAGE}:latest .
                '''
            }
        }
        stage('Run Application with Docker Compose') {
            steps {
                sh 'docker-compose up -d'
            }
        }
        stage('Run Tests with Coverage') {
            steps {
                // Make sure the service name matches your app in docker-compose.yml
                sh 'docker-compose exec -T web coverage run -m unittest discover'
            }
            post {
                success {
                    // Generate coverage report and archive it
                    sh 'docker-compose exec -T web coverage html'
                    archiveArtifacts artifacts: 'htmlcov/**', allowEmptyArchive: true
                }
            }
        }
        stage('Push to Docker Hub') {
            steps {
                sh '''
                    echo $DOCKER_HUB_CREDENTIALS_PSW | docker login -u $DOCKER_HUB_CREDENTIALS_USR --password-stdin
                    docker push ${DOCKER_IMAGE}:latest
                '''
            }
        }
    }
    post {
        always {
            // Clean up Docker Compose setup
            sh 'docker-compose down'
            sh 'docker logout'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
